#!/usr/bin/env python3
"""
Clustering Website Generator for Megascript Results

Creates an interactive HTML website from the clustering results JSON generated by mega_script.py.
Uses the same interface and styling as the original gravitational_clustering_website.py but 
adapted to work with the megascript's clustering results format.

Usage:
    python clustering_website_generator.py

This will:
1. Load clustering results from data/clustering_results.json
2. Load semantic fingerprints from data/fingerprints/ directory 
3. Generate an interactive HTML website in data/clustering_website.html
"""

import json
import sys
import os
from pathlib import Path
from typing import Dict, List, Any, Optional


def load_clustering_results(file_path: str = "data/clustering_results.json") -> Optional[Dict[str, Any]]:
    """Load clustering results from JSON file"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"❌ File not found: {file_path}")
        print("   Make sure you've run 'python mega_script.py cluster' first.")
        return None
    except json.JSONDecodeError as e:
        print(f"❌ Invalid JSON in file {file_path}: {e}")
        return None


def load_semantic_fingerprints(fingerprints_dir: str = "data/fingerprints") -> Dict[str, Any]:
    """Load all semantic fingerprints from the fingerprints directory"""
    fingerprints = {}
    fingerprints_path = Path(fingerprints_dir)
    
    if not fingerprints_path.exists():
        print(f"⚠️  Fingerprints directory not found: {fingerprints_dir}")
        print("   Website will show filenames only")
        return fingerprints
    
    # Find all JSON files in the fingerprints directory
    json_files = list(fingerprints_path.rglob("*.json"))
    
    print(f"📂 Loading semantic fingerprints from {len(json_files)} files...")
    
    for json_file in json_files:
        try:
            with open(json_file, 'r', encoding='utf-8') as f:
                fingerprint_data = json.load(f)
            
            # Use relative path as key to match clustering results
            relative_path = json_file.relative_to(fingerprints_path)
            # Convert .json back to original filename format for matching
            original_filename = str(relative_path).replace('.json', '')
            fingerprints[original_filename] = fingerprint_data
            
        except Exception as e:
            print(f"⚠️  Error loading {json_file}: {e}")
    
    print(f"✅ Loaded {len(fingerprints)} semantic fingerprints")
    return fingerprints


def convert_to_website_format(clustering_results: Dict[str, Any]) -> Dict[str, Any]:
    """Convert megascript clustering results to format expected by website generator"""
    
    # Extract the nested clustering_results data
    clustering_data = clustering_results.get("clustering_results", {})
    file_mapping = clustering_results.get("file_mapping", [])
    
    # Create the format expected by the original website generator
    website_data = {
        "labels": clustering_data.get("labels", []),
        "filenames": file_mapping,
        "method": clustering_data.get("method", "unknown"),
        "quality_score": clustering_data.get("quality_score", 0),
        "n_clusters": clustering_data.get("n_clusters", 0),
        "params": clustering_data.get("params", {})
    }
    
    return website_data


def organize_filenames_by_cluster(clustering_data: Dict[str, Any]) -> Dict[int, List[str]]:
    """Organize filenames by cluster label"""
    clusters = {}
    labels = clustering_data['labels']
    filenames = clustering_data['filenames']
    
    for filename, label in zip(filenames, labels):
        if label not in clusters:
            clusters[label] = []
        clusters[label].append(filename)
    
    return clusters


def extract_cluster_insights(cluster_filenames: List[str], semantic_fingerprints: Dict[str, Any]) -> Dict[str, Any]:
    """Extract unified insight modules combining central questions and raw essence for a cluster"""
    insights = {
        'unified_insights': [],
        'missing_files': []
    }
    
    for filename in cluster_filenames:
        # Try to find semantic fingerprint for this file
        # Remove .json extension if present and try both with and without
        base_filename = filename.replace('.json', '')
        fingerprint = None
        
        # Try different key variations
        possible_keys = [filename, base_filename, f"{base_filename}.json"]
        for key in possible_keys:
            if key in semantic_fingerprints:
                fingerprint = semantic_fingerprints[key]
                break
        
        if fingerprint:
            # Extract central question
            central_question = None
            if 'core_exploration' in fingerprint and 'central_question' in fingerprint['core_exploration']:
                central_question = fingerprint['core_exploration']['central_question']
            
            # Extract raw essence (look for it in different possible locations)
            raw_essence = None
            if 'raw_essence' in fingerprint:
                raw_essence = fingerprint['raw_essence']
            elif 'core_exploration' in fingerprint and 'raw_essence' in fingerprint['core_exploration']:
                raw_essence = fingerprint['core_exploration']['raw_essence']
            elif 'essence' in fingerprint:
                raw_essence = fingerprint['essence']
            
            # Only add if we have at least one piece of insight
            if central_question or raw_essence:
                insights['unified_insights'].append({
                    'question': central_question,
                    'essence': raw_essence,
                    'filename': filename,
                    'full_semantic_fingerprint': fingerprint
                })
        else:
            insights['missing_files'].append(filename)
    
    return insights


def generate_html_content(clustering_data: Dict[str, Any], clusters: Dict[int, List[str]], semantic_fingerprints: Dict[str, Any]) -> str:
    """Generate the complete HTML content for the clustering website"""
    
    method = clustering_data.get('method', 'unknown')
    quality_score = clustering_data.get('quality_score', 0)
    total_embeddings = len(clustering_data.get('filenames', []))
    
    html_content = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Voice Memo Clustering Results</title>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        body {{
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
            background-color: #f8f9fa;
            color: #333;
            line-height: 1.6;
        }}
        
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }}
        
        .header {{
            text-align: center;
            margin-bottom: 40px;
            background: white;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        
        .header h1 {{
            color: #2c3e50;
            margin-bottom: 10px;
            font-size: 2.5rem;
        }}
        
        .header .stats {{
            color: #666;
            font-size: 1.1rem;
        }}
        
        .stats-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }}
        
        .stat-card {{
            background: #ecf0f1;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
        }}
        
        .stat-value {{
            font-size: 1.5rem;
            font-weight: bold;
            color: #2c3e50;
        }}
        
        .stat-label {{
            color: #7f8c8d;
            text-transform: uppercase;
            font-size: 0.9rem;
        }}
        
        .tabs {{
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
            margin-bottom: 20px;
            background: white;
            padding: 10px;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        
        .tab {{
            padding: 12px 24px;
            background: #ecf0f1;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 1rem;
            transition: all 0.3s ease;
            flex: 1;
            min-width: 120px;
        }}
        
        .tab:hover {{
            background: #d5dbdb;
        }}
        
        .tab.active {{
            background: #3498db;
            color: white;
        }}
        
        .noise-tab {{
            background: #e74c3c !important;
            color: white !important;
        }}
        
        .noise-tab.active {{
            background: #c0392b !important;
        }}
        
        .cluster-content {{
            display: none;
            background: white;
            padding: 30px;
            border-radius: 12px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        
        .cluster-content.active {{
            display: block;
        }}
        
        .cluster-header {{
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 2px solid #ecf0f1;
        }}
        
        .cluster-title {{
            font-size: 1.8rem;
            color: #2c3e50;
            margin-bottom: 10px;
        }}
        
        .cluster-summary {{
            color: #666;
            font-size: 1.1rem;
        }}
        
        .insights-section {{
            margin-bottom: 40px;
        }}
        
        .section-title {{
            font-size: 1.4rem;
            color: #2c3e50;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }}
        
        .section-title::before {{
            content: "🔍";
        }}
        
        .insights-section .section-title::before {{
            content: "💡";
        }}
        
        .files-section .section-title::before {{
            content: "📄";
        }}
        
        .unified-insight-card {{
            background: #f8f9fa;
            padding: 25px;
            border-radius: 10px;
            margin-bottom: 20px;
            border-left: 4px solid #9b59b6;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }}
        
        .insight-question {{
            font-size: 1.2rem;
            color: #2c3e50;
            font-weight: 600;
            margin-bottom: 12px;
            line-height: 1.4;
        }}
        
        .insight-essence {{
            font-size: 1.05rem;
            color: #34495e;
            margin-bottom: 10px;
            line-height: 1.5;
            font-style: italic;
        }}
        
        .insight-source {{
            font-size: 0.9rem;
            color: #7f8c8d;
            font-style: normal;
            padding-top: 8px;
            border-top: 1px solid #ecf0f1;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }}
        
        .dropdown-toggle {{
            background: #3498db;
            color: white;
            border: none;
            padding: 5px 10px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.8rem;
            transition: background-color 0.3s ease;
        }}
        
        .dropdown-toggle:hover {{
            background: #2980b9;
        }}
        
        .semantic-dropdown {{
            display: none;
            background: #ffffff;
            border: 1px solid #e1e8ed;
            border-radius: 6px;
            margin-top: 10px;
            max-height: 400px;
            overflow-y: auto;
        }}
        
        .semantic-dropdown.show {{
            display: block;
        }}
        
        .semantic-section {{
            padding: 12px 15px;
            border-bottom: 1px solid #f1f3f4;
        }}
        
        .semantic-section:last-child {{
            border-bottom: none;
        }}
        
        .semantic-title {{
            font-weight: 600;
            color: #2c3e50;
            font-size: 0.9rem;
            margin-bottom: 5px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }}
        
        .semantic-content {{
            color: #34495e;
            font-size: 0.85rem;
            line-height: 1.4;
            white-space: pre-wrap;
        }}
        
        .semantic-array {{
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
            margin-top: 5px;
        }}
        
        .semantic-tag {{
            background: #ecf0f1;
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 0.75rem;
            color: #7f8c8d;
        }}
        
        .files-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 10px;
        }}
        
        .file-item {{
            background: #f8f9fa;
            padding: 12px;
            border-radius: 6px;
            font-family: monospace;
            font-size: 0.9rem;
            color: #2c3e50;
        }}
        
        .empty-state {{
            text-align: center;
            padding: 40px;
            color: #7f8c8d;
            font-style: italic;
        }}
        
        .footer {{
            margin-top: 60px;
            text-align: center;
            color: #7f8c8d;
            font-size: 0.9rem;
        }}
        
        @media (max-width: 768px) {{
            .container {{
                padding: 10px;
            }}
            
            .header h1 {{
                font-size: 2rem;
            }}
            
            .tabs {{
                flex-direction: column;
            }}
            
            .tab {{
                flex: none;
            }}
            
            .files-grid {{
                grid-template-columns: 1fr;
            }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🎙️ Voice Memo Clustering Results</h1>
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-value">{total_embeddings}</div>
                    <div class="stat-label">Voice Memos</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">{len([c for c in clusters.keys() if c != -1])}</div>
                    <div class="stat-label">Clusters Found</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">{quality_score:.3f}</div>
                    <div class="stat-label">Quality Score</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">{method.upper()}</div>
                    <div class="stat-label">Method Used</div>
                </div>
            </div>
        </div>
        
        <div class="tabs">
"""
    
    # Generate tab buttons - sort by cluster size (most insights first), then by cluster ID
    # Put noise points (-1) at the end
    regular_clusters = [(cluster_id, len(clusters[cluster_id])) for cluster_id in clusters.keys() if cluster_id != -1]
    regular_clusters.sort(key=lambda x: (-x[1], x[0]))  # Sort by size DESC, then ID ASC
    
    sorted_clusters = [cluster_id for cluster_id, _ in regular_clusters]
    if -1 in clusters:
        sorted_clusters.append(-1)  # Add noise points at the end
    
    for cluster_id in sorted_clusters:
        count = len(clusters[cluster_id])
        if cluster_id == -1:
            html_content += f'            <button class="tab noise-tab" onclick="showCluster({cluster_id})">Noise Points ({count})</button>\n'
        else:
            html_content += f'            <button class="tab" onclick="showCluster({cluster_id})">Cluster {cluster_id} ({count})</button>\n'
    
    html_content += "        </div>\n\n"
    
    # Generate cluster content panels
    for cluster_id in sorted_clusters:
        cluster_filenames = clusters[cluster_id]
        insights = extract_cluster_insights(cluster_filenames, semantic_fingerprints)
        
        html_content += f'        <div id="cluster-{cluster_id}" class="cluster-content">\n'
        
        if cluster_id == -1:
            html_content += f"""            <div class="cluster-header">
                <h2 class="cluster-title">🌫️ Noise Points</h2>
                <p class="cluster-summary">Voice memos that don't fit clearly into any cluster ({len(cluster_filenames)} items)</p>
            </div>
"""
        else:
            html_content += f"""            <div class="cluster-header">
                <h2 class="cluster-title">🎯 Cluster {cluster_id}</h2>
                <p class="cluster-summary">A collection of {len(cluster_filenames)} voice memos with related themes and insights</p>
            </div>
"""
        
        # Unified Insights section
        if insights['unified_insights']:
            html_content += """            <div class="insights-section">
                <h3 class="section-title">Key Insights</h3>
"""
            for i, insight_data in enumerate(insights['unified_insights']):
                insight_id = f"cluster-{cluster_id}-insight-{i}"
                html_content += f"""                <div class="unified-insight-card">
"""
                if insight_data['question']:
                    html_content += f"""                    <div class="insight-question">❓ {insight_data['question']}</div>
"""
                if insight_data['essence']:
                    html_content += f"""                    <div class="insight-essence">✨ {insight_data['essence']}</div>
"""
                html_content += f"""                    <div class="insight-source">
                        <span>📄 Source: {insight_data['filename']}</span>
                        <button class="dropdown-toggle" onclick="toggleSemanticDropdown('{insight_id}')">
                            View Details
                        </button>
                    </div>
                    <div id="{insight_id}" class="semantic-dropdown">
"""
                
                # Add semantic fingerprint sections
                fingerprint = insight_data.get('full_semantic_fingerprint', {})
                
                # Core exploration section
                if 'core_exploration' in fingerprint:
                    core = fingerprint['core_exploration']
                    html_content += """                        <div class="semantic-section">
                            <div class="semantic-title">Core Exploration</div>
"""
                    if 'central_question' in core:
                        html_content += f"""                            <div class="semantic-content"><strong>Central Question:</strong> {core['central_question']}</div>
"""
                    if 'key_tension' in core:
                        html_content += f"""                            <div class="semantic-content"><strong>Key Tension:</strong> {core['key_tension']}</div>
"""
                    if 'breakthrough_moment' in core:
                        html_content += f"""                            <div class="semantic-content"><strong>Breakthrough Moment:</strong> {core['breakthrough_moment']}</div>
"""
                    if 'edge_of_understanding' in core:
                        html_content += f"""                            <div class="semantic-content"><strong>Edge of Understanding:</strong> {core['edge_of_understanding']}</div>
"""
                    html_content += """                        </div>
"""
                
                # Raw essence
                if 'raw_essence' in fingerprint:
                    html_content += f"""                        <div class="semantic-section">
                            <div class="semantic-title">Raw Essence</div>
                            <div class="semantic-content">{fingerprint['raw_essence']}</div>
                        </div>
"""
                
                # Conceptual DNA
                if 'conceptual_dna' in fingerprint:
                    html_content += """                        <div class="semantic-section">
                            <div class="semantic-title">Conceptual DNA</div>
"""
                    for i, concept in enumerate(fingerprint['conceptual_dna'], 1):
                        html_content += f"""                            <div class="semantic-content">{i}. {concept}</div>
"""
                    html_content += """                        </div>
"""
                
                # Insight pattern
                if 'insight_pattern' in fingerprint:
                    pattern = fingerprint['insight_pattern']
                    html_content += """                        <div class="semantic-section">
                            <div class="semantic-title">Insight Pattern</div>
"""
                    if 'thinking_styles' in pattern:
                        html_content += """                            <div class="semantic-content"><strong>Thinking Styles:</strong></div>
                            <div class="semantic-array">
"""
                        for style in pattern['thinking_styles']:
                            html_content += f"""                                <span class="semantic-tag">{style}</span>
"""
                        html_content += """                            </div>
"""
                    if 'insight_type' in pattern:
                        html_content += f"""                            <div class="semantic-content"><strong>Insight Type:</strong> {pattern['insight_type']}</div>
"""
                    if 'development_stage' in pattern:
                        html_content += f"""                            <div class="semantic-content"><strong>Development Stage:</strong> {pattern['development_stage']}</div>
"""
                    if 'connected_domains' in pattern:
                        html_content += """                            <div class="semantic-content"><strong>Connected Domains:</strong></div>
                            <div class="semantic-array">
"""
                        for domain in pattern['connected_domains']:
                            html_content += f"""                                <span class="semantic-tag">{domain}</span>
"""
                        html_content += """                            </div>
"""
                    html_content += """                        </div>
"""
                
                # Insight quality
                if 'insight_quality' in fingerprint:
                    quality = fingerprint['insight_quality']
                    html_content += """                        <div class="semantic-section">
                            <div class="semantic-title">Insight Quality</div>
"""
                    if 'uniqueness_score' in quality:
                        html_content += f"""                            <div class="semantic-content"><strong>Uniqueness Score:</strong> {quality['uniqueness_score']:.2f}</div>
"""
                    if 'depth_score' in quality:
                        html_content += f"""                            <div class="semantic-content"><strong>Depth Score:</strong> {quality['depth_score']:.2f}</div>
"""
                    if 'generative_score' in quality:
                        html_content += f"""                            <div class="semantic-content"><strong>Generative Score:</strong> {quality['generative_score']:.2f}</div>
"""
                    if 'usefulness_score' in quality:
                        html_content += f"""                            <div class="semantic-content"><strong>Usefulness Score:</strong> {quality['usefulness_score']:.2f}</div>
"""
                    if 'confidence_score' in quality:
                        html_content += f"""                            <div class="semantic-content"><strong>Confidence Score:</strong> {quality['confidence_score']:.2f}</div>
"""
                    html_content += """                        </div>
"""
                
                html_content += """                    </div>
                </div>
"""
            html_content += "            </div>\n\n"
        
        # Files section
        html_content += """            <div class="insights-section files-section">
                <h3 class="section-title">Voice Memos in this Cluster</h3>
                <div class="files-grid">
"""
        for filename in cluster_filenames:
            html_content += f"""                    <div class="file-item">{filename}</div>
"""
        html_content += """                </div>
            </div>
"""
        
        # Show warning for missing semantic fingerprints
        if insights['missing_files']:
            html_content += f"""            <div class="empty-state">
                ⚠️ {len(insights['missing_files'])} voice memos in this cluster don't have semantic fingerprints available
            </div>
"""
        
        html_content += "        </div>\n\n"
    
    # Close HTML and add JavaScript
    html_content += """        <div class="footer">
            Generated from voice memo clustering analysis
        </div>
    </div>
    
    <script>
        function showCluster(clusterId) {
            // Hide all cluster content
            const contents = document.querySelectorAll('.cluster-content');
            contents.forEach(content => content.classList.remove('active'));
            
            // Remove active class from all tabs
            const tabs = document.querySelectorAll('.tab');
            tabs.forEach(tab => tab.classList.remove('active'));
            
            // Show selected cluster content
            const targetContent = document.getElementById(`cluster-${clusterId}`);
            if (targetContent) {
                targetContent.classList.add('active');
            }
            
            // Add active class to clicked tab
            event.target.classList.add('active');
        }
        
        function toggleSemanticDropdown(dropdownId) {
            const dropdown = document.getElementById(dropdownId);
            const button = event.target;
            
            if (dropdown.classList.contains('show')) {
                dropdown.classList.remove('show');
                button.textContent = 'View Details';
            } else {
                // Close all other dropdowns first
                document.querySelectorAll('.semantic-dropdown.show').forEach(dd => {
                    dd.classList.remove('show');
                    const otherButton = dd.previousElementSibling.querySelector('.dropdown-toggle');
                    if (otherButton) otherButton.textContent = 'View Details';
                });
                
                dropdown.classList.add('show');
                button.textContent = 'Hide Details';
            }
        }
        
        // Show first cluster by default
        document.addEventListener('DOMContentLoaded', function() {
            const firstTab = document.querySelector('.tab');
            if (firstTab) {
                firstTab.click();
            }
        });
    </script>
</body>
</html>
"""
    
    return html_content


def main():
    """Main execution function"""
    print("🌐 Voice Memo Clustering Website Generator")
    print("=" * 60)
    
    # Load clustering results
    print("📂 Loading clustering results...")
    clustering_results = load_clustering_results()
    if clustering_results is None:
        return 1
    
    # Extract summary info
    summary = clustering_results.get("summary", {})
    print(f"✅ Loaded clustering data with {summary.get('total_embeddings', 0)} voice memos")
    print(f"   Method: {summary.get('best_method', 'unknown')}")
    print(f"   Quality Score: {summary.get('quality_score', 0):.3f}")
    print(f"   Clusters Found: {summary.get('clusters_found', 0)}")
    
    # Load semantic fingerprints
    print("\n📂 Loading semantic fingerprints...")
    semantic_fingerprints = load_semantic_fingerprints()
    
    # Convert clustering results to website format
    print("🔄 Converting data format...")
    website_data = convert_to_website_format(clustering_results)
    
    # Organize data by cluster
    clusters = organize_filenames_by_cluster(website_data)
    
    # Generate HTML content
    print("🎨 Generating HTML website...")
    html_content = generate_html_content(website_data, clusters, semantic_fingerprints)
    
    # Write to output file
    output_file = Path("data/websites/clustering_website.html")
    output_file.parent.mkdir(parents=True, exist_ok=True)
    
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    print(f"\n✅ Website generated successfully!")
    print(f"📁 File saved to: {output_file.absolute()}")
    print(f"🌐 Open in browser: file://{output_file.absolute()}")
    print(f"📊 Website shows {len(clusters)} clusters with {sum(len(files) for files in clusters.values())} total voice memos")
    
    # Show some stats
    with_insights = sum(len(extract_cluster_insights(cluster_files, semantic_fingerprints)['unified_insights']) 
                       for cluster_files in clusters.values())
    print(f"💡 Found semantic fingerprints for insights across clusters")
    
    return 0


if __name__ == "__main__":
    exit(main())